* =================================================================
* This file is part of “Ecoscale Weelogger Library software” (hereinafter the “Software”)
*
* =================================================================
* Developer(s):     Konstantin Bakanov, The Queen's University of Belfast, Northern Ireland.
*                   Nhat Phuong Tran, The Queen's University of Belfast, Northern Ireland.
* Principal
* Investigator(s):      Prof. Dimitrios Nikolopoulos, The Queen's University of Belfast, Northern Ireland.
*
* The project (“Energy-efficient Heterogeneous COmputing at exaSCALE - EcoScale”) leading to this Software has received 
* funding from the European Commission under 671632 — ECOSCALE — H2020-FETHPC-2014/H2020-FETHPC-2014.
*
* Copyright 2015-2018, The Queen's University of Belfast, Northern Ireland
* =================================================================
* Licensed under the GNU Lesser General Public License, as published by the Free Software Foundation, either version 3 or at your option any later version (hereinafter the "License");
* you must not use this Software except in compliance with the terms of the License.
*
* Unless required by applicable law or agreed upon in writing, this Software is distributed on an "AS IS" BASIS, WITHOUT ANY WARRANTY;
* without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE, neither express nor implied.
* For details see terms of the License (see attached file: README. The License is also available at https://www.gnu.org/licenses/lgpl-3.0.en.html
* =================================================================

1. Intro
~~~~~~~~
Weelogger was created out of the need to have a compact, lightweight and modular logging library.
All libraries that I found were either too monolithic and primitive or way too complex.

2. Design
~~~~~~~~~
The inspiration was Boost::Log's design. At the centre of the library is the core (thread-safe, if enabled).
The core should stay as compact as possible. The only thing that is predefined in the core are the logging levels.
The other components are modules that can be inserted as needed.
Attributes prepend some user-defined information to the string. Examples would be: date, time, PID.
Sinks are responsible for writing the output stream to the device of choice. The default sinks included with the
distribution are stdout sink and file sink.
The user is free to develop and add as many attributes and sinks as one would like.

3. Build
~~~~~~~~
The build system is made of 1 plain vanilla makefile. In order to build the library and tests, create an empty
directory anywhere on your system. Then type `make -f <path_to_weelogger_dir>/Makefile`.
This will build by default just the static and dynamic libraries. The only header file that needs to be included 
is the wl_logger.h.
The C++ wrapper can be found in the cpp folder. It is built as a part of the default build.
The tests are scarce at the moment and can be found in the folder apps. The test build targets are basic_test, file_test,
cpp_test.

4. Use
~~~~~~
The library is licensed under LGPL v3.
For usage examples check the apps directory.

